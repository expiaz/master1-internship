# Rapports hebdomadaires de Rémi Gidon

## Semaine 1 - 13/04

Done
* Étude du marché des "smart locks"
* Étude des technologies utilisées pour l'identification / ouverture automatique (BLE/NFC)

Doing
* Étude du BLE (phase 2 principalement) voir NFC
* Étude de l'historique des attaques perpétuées sur les "smart locks"
* Plusieurs attaques sont identifiées, je ne retiens que les attaques par "replay" ou "eavesdropping" pour mon sujet (HackRF) car le reste ce concentre sur les communications client-serveur (API, APK) faites via d'autres support (WiFi, ethernet).

Todo
* Étude implementation BLE smart lock / app smartphone (android?ios?)
* Étude des possibilités d'attaque replay simple (save & replay) ou plus complexe (broadcast / spoofing) sur le BLE ou NFC
* Étude de la carte HackRF

Sources:
https://people.eecs.berkeley.edu/~daw/papers/locks-asiaccs16.pdf
https://courses.csail.mit.edu/6.857/2017/project/3.pdf
https://www2.eecs.berkeley.edu/Pubs/TechRpts/2016/EECS-2016-11.html

## Semaine 2 - 20/04

Done
* Setup LaTeX / Pandoc local + template rapport

Doing
* Étude de la carte HackRF
* Rédaction introduction

Todo
* Étude du BLE
* Attaques sur le BLE

Sources:
https://pandoc.org/
https://github.com/Wandmalfarbe/pandoc-latex-template
https://gitlab.com/hackrf/hackrf-domotique/

## Semaine 3 - 27/04

Étude de faisabilité sur les serrures connectées vulnérables sans matériel dédié (ou un minimum).  
Il existe plusieurs serrures connectées en BLE (directement au smartphone pour la plupart) vulnérables à des attaques par relay / replay et fuzzing (error state abuse).  
Ces vulnérabilités ont étés reportées aux fabriquants en 2016 lors de la DEFCON 24. Les vulnérabilités ont depuis étés corrigées ou le produit retiré du marché.  
Ces attaques demandent toutes d'utiliser un périphérique externe (USB) permettant d'écouter passivement le traffic externe à l'ordinateur (la puce bluetooth ne permettant que d'écouter le traffic interne du PC).  
Cependant, le code utilisé et la proceéédure étant disponible en ligne, il est théoriquement possible de reproduire ces attaques après s'être procuré l'un des systèmes vulnérable.

Concernant le protocole BLE en lui même, la phase d'appairage n'est plus vulnérable à l'écoute passive depuis la version 4.2 (utilisation de Diffie Hellman ECC), mais encore aux man-in-the-middle car celui-ci ne garantie par forcément l'authenticité des informations (erreur de configuration possible).

Sources:
https://github.com/asjoyner/defcon24/blob/master/slides/DEFCON-24-Rose-Ramsey-Picking-Bluetooth-Low-Energy-Locks.pdf
https://www.kth.se/polopoly_fs/1.914054.1561620889!/Examensarbete%20Final.pdf
BLE security:
https://www.digikey.com/eewiki/display/Wireless/A+Basic+Introduction+to+BLE+Security
http://docplayer.net/182588053-Securing-bluetooth-low-energy-locks-from-unauthorizedaccess-and-surveillance.html
https://www.usenix.org/system/files/conference/woot13/woot13-ryan.pdf

# Semaine 4 - 4/05

Mon sujet se précise sur le protocole BLE et l'internet des objets plutot que les communications et architectures domotique en général.  

Après études des solutions existantes pour l'audit et l'attaque de ce protocole, j'ai choisit Mirage. C'est un framework qui combine plusieurs librairies BLE existantes (C et python) et s'interface avec différents appareils. Il est facilement modifiable pour étendre ces fonctionnalités en fonction de mes besoins.  

De base Mirage fournis plusieurs modules pour réaliser des tâches allant de l'interfacage avec un peripherique bluetooth jusqu'a la recuperation et/ou modification à la volée de paquets BLE (via MiTM).  
Côté matériel, j'ai d'abors regarder les périphériques compatibles avec Mirage et mon sujet.  
Chaque périphérique permet des fontions plus ou moins avancées (selon la complexité du périphérique et donc son prix).  
Mon besoin étant:
- inventaire des périphérique bluetooth alentour
- collecte d'informations (sensibles)
- localisation des périphériques bluetooth alentour 
(+ brouillage / interception communication)
J'ai choisit en conséquence des appareils adaptés:
- 2 dongle BLE HCI standard pour l'inventaire et la collecte d'information (MiTM)
- 1 carte de développement BLE permettant l'écoute passive (sniffing) et le brouillage / jamming de connexions
Je me suis assuré qu'ils soient compatibles avec Mirage.  

Enfin, Mirage ne permet pas la localisation des appareils via BLE, mais le framework étant extensible, je compte l'implémenter par moi même.  
N'importe quel appareil du matériel precedemment enoncé permet la localisation via RSS (puissance du signal reçu). Cette méthode ne nous donne qu'un cercle approximatif sur lequel l'appareil peut se trouver. Pour préciser la localisation il faut ajouter une autre source d'information comme l'angle d'arrivée de la transmission (demande du matériel supplémentaire ainsi que le support BLE 5.1) ou 2 autres points de donnée pour permettre la trilatération. Même en utilisant ces méthodes, le resultat reste approximatif et il est necessaire de croiser plusieurs méthodes ou modèles pour améliorer la précision (dead-reckoning, path-loss, least mean square ... avec filtre kalmann).

Sources:
https://hal.archives-ouvertes.fr/hal-02268774/file/SSTIC2019-Article-mirage_un_framework_offensif_pour_laudit_du_bluetooth_low_energy-alata_auriol_roux_cayre_nicomette.pdf

IPS localisation:
https://3pl46c46ctx02p7rzdsvsg21-wpengine.netdna-ssl.com/wp-content/uploads/2019/03/1901_Enhancing-Bluetooth-Location-Service_FINAL.pdf
https://iotandelectronics.wordpress.com/2016/10/07/how-to-calculate-distance-from-the-rssi-value-of-the-ble-beacon/

# Semaine 5 - 11/05

Rédaction structure du rapport:
- contexte objets connectes / domotique
- marché Bt/BLE
- protocole Bt/BLE
- attaques et outils existants sur le protocole
- choix technique logiciel et materiel (mirage & dongles)

Setup Docker (sur Mac)
Setup VM (paravirtualisee) pour test Mirage
Setup matériel pour mirage (custom firmware microbit)
Tests du matériel avec Mirage (dongle HCI / microbit)

# Semaine 6 - 18/05

Mise en place des modules intégrant la plupart des fonctionnalités du PoC via CLI Mirage pour tester leurs fonctionnement et comptabilité.
Tests de redondance avec BTLEJack (Mirage est basé dessus) pour valider les comportements ou erreurs.
Découverte de plusieurs problèmes et corrections de bugs dans Mirage, impossibilité de départager si l'erreur viens de Mirage ou de ma connexion BLE testée dans certains cas.
TODO: mettre en place une connexion BLE entre 2 dongle HCI via Mirage et essayer les modules offensifs dessus (trouver un hub USB aussi car les macs et leurs 2 ports USB...).

Rédaction des spécifications du PoC dans le rapport
Difficultés à configurer pandoc correctement avec les extensions pour reproduire la même sortie qu'avec LaTeX directement.

# Semaine 7 - 25/05

Étude des specifications BLE pour rédiger la partie présentation du protocole.
Redaction de l'etude du protocole BLE dans le rapport.

# Semaine 8 - 01/06

Rédaction partie étude de marché sur les objets connectés dans le rapport.
Rédaction partie analyse de l'existant outils offensifs dans le rapport.
Rédaction partie framework de Mirage dans le rapport.

Mise en place d'un slave avec scenario Mirage.
Mise en place d'un master avec scenario Mirage.
Mise en place d'un reseau de test via le slave et master BLE.

# Semaine 9 - 08/06

Module Mirage de localisation `ble_locate`
- Recuperation du RSSI et calcul de la distance si TxPower disponible
- Scan pour les annonces pour les connections existantes et calcul une moyenne sur N echantillons des relevés

Integration de flask, Socket.IO et Hyperapp pour l'interface de l'application
Architecture du front en composants et bindings websockets

TODO:
Bindings websockets flask
Bindings flask - Mirage (surcharge modules et steps pour log ?)
Design front (integration & style)
Implementation autres attaques

# Semaine 10 - 15/06

Intégration de Flask avec Mirage: creation d'une API pour interfacer le backend avec Mirage
Mise en place des events websockets pour la communication front/back
Integration radar front et changement du fonctionnement des controles
Deplacement des attaques dans le CLI Mirage car redondance avec API/GUI en front
Asynchronisation de l'API Mirage dans le backend pour garder la responsivité en front et etre notifieé lors de changements plutot qu'attendre la fin d'une attaque

TODO:
Attaques CLI Mirage Hijack/MITM
Redaction attaques et tests/validation
Redaction documentation
Relecture rapport

# Semaine 11 - 22/06

