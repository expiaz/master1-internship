diff --git a/mirage/core/app.py b/mirage/core/app.py
index 4a867a5..92e53b9 100644
--- a/mirage/core/app.py
+++ b/mirage/core/app.py
@@ -47,6 +47,7 @@ class App(interpreter.Interpreter):
 		self.loader = loader.Loader()
 		self.modules = []
 		self.taskManager = taskManager.TaskManager()
+		self.logger = None
 
 		# Creation of the temporary directory
 		if not os.path.exists(self.tempDir):
diff --git a/mirage/core/module.py b/mirage/core/module.py
index fe9bcad..49b6236 100644
--- a/mirage/core/module.py
+++ b/mirage/core/module.py
@@ -115,6 +115,7 @@ class Module:
 		except EOFError:
 			self.postrun()
 			raise EOFError
+
 	def info(self):
 		'''
 		This method is an helper allowing to generate a dictionary including some useful informations about the module.
@@ -182,9 +183,11 @@ class Module:
 				current = scenarios.__scenarios__[self.args["SCENARIO"]]
 				if hasattr(current,self.args["SCENARIO"]):
 					scenarioClass = getattr(current,self.args["SCENARIO"])
+					useKbd = True if not hasattr(scenarioClass, 'useKeyboard') or getattr(scenarioClass, 'useKeyboard') == True else False
 					self.scenario = scenarioClass(module=self)
 					self.scenarioEnabled = True
-					self.watchKeyboard()
+					if useKbd:
+						self.watchKeyboard()
 				return True
 			except ModuleNotFoundError:
 				io.fail("Scenario "+self.args["SCENARIO"]+" not found !")
diff --git a/mirage/libs/ble.py b/mirage/libs/ble.py
index 89e53ec..64b3cb9 100644
--- a/mirage/libs/ble.py
+++ b/mirage/libs/ble.py
@@ -494,7 +494,6 @@ class BLEEmitter(wireless.Emitter):
 		super().__init__(interface=interface, packetType=BLEPacket, deviceType=deviceClass)
 
 	def convert(self,packet):
-		
 		if packet.packet is None:
 			if isinstance(packet,BLEEncryptedPacket):
 					packet.packet = BTLE() / BTLE_DATA(packet.data)
@@ -836,7 +835,6 @@ class BLEReceiver(wireless.Receiver):
 		new.packet = packet
 		if "hci" in self.interface or "adb" in self.interface:
 			#packet.show()
-
 			if packet.type == TYPE_ACL_DATA:
 				if ATT_Exchange_MTU_Request in packet:
 					return BLEExchangeMTURequest(
@@ -1411,7 +1409,6 @@ class BLEReceiver(wireless.Receiver):
 									clkn_high=packet.clkn_high
 									)
 			elif "microbit" in self.interface:
-				
 				new.additionalInformations = BLESniffingParameters(
 									rssi = packet.rssi_avg,
 									rssi_count = packet.rssi_count,
diff --git a/mirage/libs/ble_utils/btlejack.py b/mirage/libs/ble_utils/btlejack.py
index c531745..4369dd4 100644
--- a/mirage/libs/ble_utils/btlejack.py
+++ b/mirage/libs/ble_utils/btlejack.py
@@ -54,6 +54,7 @@ class BTLEJackDevice(wireless.Device):
 			"getChannel",
 
 			"sniffNewConnections",
+			"scanExistingConnections",
 			"sniffExistingConnections",
 			"sniffAdvertisements", 
 
@@ -244,7 +245,7 @@ class BTLEJackDevice(wireless.Device):
 
 		:Example:
 			
-			>>> BTLEJackDevice.findMicrobits(0)
+			>>> BTLEJackDevice.findcapabilitiess(0)
 			'/dev/ttyACM0'
 			>>> BTLEJackDevice.findMicrobits()
 			['/dev/ttyACM0','/dev/ttyACM1']
@@ -387,6 +388,7 @@ class BTLEJackDevice(wireless.Device):
 		return (pkt.major,pkt.minor)
 
 	def _reset(self):
+		print('btlejack reset')
 		self._internalCommand(BTLEJack_Reset_Command())
 
 	def getFirmwareVersion(self):
@@ -527,6 +529,25 @@ class BTLEJackDevice(wireless.Device):
 					self._setChannelMap(channelMap)
 					self._recoverFromChannelMap(accessAddress,crcInit, channelMap)
 
+	def scanExistingConnections(self, onConnection=None, resetState=False):
+		'''
+		Provide same functionnalities as sniffExistingConnections but keep scanning for connection
+		instead of targeting one and trying to recover parameters after a certain amount of hits
+		'''
+		self.scanMode = True
+		if resetState:
+			self._reset()
+		if callable(onConnection):
+			self.onConnectionScanned = onConnection
+		response = self._internalCommand(BTLEJack_Scan_Connections_Command())
+		print('scanConn response {} : {}'.format(response.packet_type, response.notification_type if response.packet_type == 0x4 else response.opcode))
+		# remove queued notifications and responses from previous executions
+		if resetState:
+			self._flush()
+			self._flushCommandResponses()
+		return self.candidateAccessAddresses
+
+
 	def _resetFilteringPolicy(self,policyType="blacklist"):
 		policy = 0x00 if policyType == "blacklist" else 0x01
 		self._internalCommand(BTLEJack_Advertisements_Command()/BTLEJack_Advertisements_Reset_Policy_Command(policy_type=policy))
@@ -712,7 +733,7 @@ class BTLEJackDevice(wireless.Device):
 			self.candidateAccessAddresses[accessAddress]["hits"] += 1
 			self.candidateAccessAddresses[accessAddress]["channels"].add(channel)
 
-		if self.candidateAccessAddresses[accessAddress]["hits"] >= 5:
+		if not self.scanMode and self.candidateAccessAddresses[accessAddress]["hits"] >= 5:
 			io.success("Access Address selected : "+"0x{:08x}".format(accessAddress))
 			self._setAccessAddress(accessAddress)
 			self._recoverFromAccessAddress(accessAddress=accessAddress)
@@ -734,7 +755,6 @@ class BTLEJackDevice(wireless.Device):
 			if len(self.receptionBuffer) >= 4:
 				size = struct.unpack('<H',self.receptionBuffer[2:4])[0]
 				if len(self.receptionBuffer) >= size + 5:
-					#print(self.receptionBuffer[:size+5].hex())
 					pkt = BTLEJack_Hdr(self.receptionBuffer[:size+5])
 					self.receptionBuffer = self.receptionBuffer[size+5:]
 					return pkt
@@ -925,16 +945,20 @@ class BTLEJackDevice(wireless.Device):
 		pkt = self._recv()
 		self._exitListening()
 		if pkt is not None:
-
+			# if pkt.packet_type == 0x4:
+			# 	print('{} notification : {}'.format(pkt.packet_type, pkt.notification_type))
+			# else:
+			# 	print('{} response : {}'.format(pkt.packet_type, pkt.opcode))
 			if self.customMirageFirmware and BTLEJack_Advertisement_Packet_Notification in pkt:
 				timestamp = time.time()
 				ts_sec = int(timestamp)
 				ts_usec = int((timestamp - ts_sec)*1000000)
-								
-				if pkt.crc_ok == 0x01:
-					io.success("CRC OK !")
-				else:
-					io.fail("CRC not OK !")
+				
+				if utils.isDebugMode():
+					if pkt.crc_ok == 0x01:
+						io.success("CRC OK !")
+					else:
+						io.fail("CRC not OK !")
 				
 				if pkt.crc_ok != 0x01 and self.crcEnabled:
 					return None
@@ -948,9 +972,10 @@ class BTLEJackDevice(wireless.Device):
 						rssi_avg=-pkt.rssi,
 						rssi_count=1)/BTLE()/BTLE_ADV(pkt.ble_payload)
 			if BTLEJack_Access_Address_Notification in pkt:
-				self._addCandidateAccessAddress(accessAddress=pkt.access_address,
-								rssi=pkt.rssi,
-								channel=pkt.channel)
+				self.onConnectionScanned(pkt.access_address, pkt.rssi, pkt.channel)
+				# self._addCandidateAccessAddress(accessAddress=pkt.access_address,
+				# 				rssi=pkt.rssi,
+				# 				channel=pkt.channel)
 			if BTLEJack_CRCInit_Notification in pkt:
 				self._updateCrcInit(crcInit=pkt.crc_init)
 			if BTLEJack_Channel_Map_Notification in pkt:
@@ -1100,6 +1125,7 @@ class BTLEJackDevice(wireless.Device):
 	def _stopSweepingThread(self):
 		if self.sweepingThreadInstance is not None:
 			self.sweepingThreadInstance.stop()
+			self.sweepingThreadInstance.join()
 			self.sweepingThreadInstance = None
 
 
@@ -1133,6 +1159,8 @@ class BTLEJackDevice(wireless.Device):
 			self.isListening = False
 			self.hijacking = False
 			self.jamming = False
+			self.scanMode = False # used to scan existing connections only and do not perform any attacks on it
+			self.onConnectionScanned = self._addCandidateAccessAddress
 			self.customMirageFirmware = False
 			self.receptionBuffer = b""
 			self.lock = Lock()
diff --git a/mirage/libs/ble_utils/pcap.py b/mirage/libs/ble_utils/pcap.py
index 4b6dc5f..798b23d 100644
--- a/mirage/libs/ble_utils/pcap.py
+++ b/mirage/libs/ble_utils/pcap.py
@@ -246,7 +246,6 @@ class BLEPCAPDevice(wireless.PCAPDevice):
 			This method is a **shared method** and can be called from the corresponding Emitters / Receivers.
 
 		'''
-
 		self.startReading()
 		self.target = address.upper()
 		self.sniffingMode = BLESniffingMode.ADVERTISEMENT
diff --git a/mirage/libs/bt_utils/assigned_numbers.py b/mirage/libs/bt_utils/assigned_numbers.py
index f18edc6..362041b 100644
--- a/mirage/libs/bt_utils/assigned_numbers.py
+++ b/mirage/libs/bt_utils/assigned_numbers.py
@@ -348,6 +348,15 @@ PERMISSIONS = [
 	    		"Broadcast"
     		]
 
+AD_TYPES = {
+    "Flags": 0x01,
+    "Incomplete List of 16-bit Service Class UUIDs": 0x02,
+    "Complete List of 16-bit Service Class UUIDs": 0x03,
+    "Shortened Local Name": 0x08,
+    "Complete Local Name": 0x09,
+    "Tx Power Level": 0x0A
+}
+
 ASSIGNED_NUMBERS = {
     "6144": {
         "name": "Generic Access",
diff --git a/mirage/libs/bt_utils/scapy_vendor_specific.py b/mirage/libs/bt_utils/scapy_vendor_specific.py
index 6611ef9..cc59fa2 100644
--- a/mirage/libs/bt_utils/scapy_vendor_specific.py
+++ b/mirage/libs/bt_utils/scapy_vendor_specific.py
@@ -2,6 +2,15 @@ from scapy.all import Packet
 from scapy.layers.bluetooth import *
 '''
 This module contains some scapy definitions defining some vendor specific HCI packets in order to change the BD Address.
+
+https://www.bluetooth.com/specifications/assigned-numbers/company-identifiers/
+0: Ericsson Technology Licensing
+10: Qualcomm Technologies International, Ltd. (QTIL) -> https://www.qualcomm.com/products/csr8510
+13: Texas Instruments Inc.
+15: Broadcom Corporation
+18: Zeevo, Inc.
+48: ST Microelectronics
+57: Integrated System Solution Corp.
 '''
 COMPATIBLE_VENDORS = [0,10,13,15,18,48,57]
 
diff --git a/mirage/libs/io.py b/mirage/libs/io.py
index 27d964b..d7d7a2b 100644
--- a/mirage/libs/io.py
+++ b/mirage/libs/io.py
@@ -5,6 +5,7 @@ import matplotlib
 matplotlib.use('Agg')
 import matplotlib.pyplot as plt
 import matplotlib.animation as animation
+from mirage.libs import utils
 
 '''
 This submodule provides some useful functions allowing to interact with the users.
@@ -120,6 +121,9 @@ def success(message):
 	'''
 	if VERBOSITY_LEVEL > VerbosityLevels.NONE:
 		print(colorize("[SUCCESS] ","green")+message)
+		if utils.getLogger() != None:
+			utils.getLogger()('success', message)
+
 
 def fail(message):
 	'''
@@ -130,6 +134,9 @@ def fail(message):
 	'''
 	if VERBOSITY_LEVEL > VerbosityLevels.NONE:
 		print(colorize("[FAIL] ","red")+message)
+		if utils.getLogger() != None:
+			utils.getLogger()('fail', message)
+
 
 def info(message):
 	'''
@@ -140,6 +147,8 @@ def info(message):
 	'''
 	if VERBOSITY_LEVEL == VerbosityLevels.ALL:
 		print(colorize("[INFO] ","yellow")+message)
+		if utils.getLogger() != None:
+			utils.getLogger()('info', message)
 
 
 def displayPacket(packet):
@@ -162,6 +171,8 @@ def warning(message):
 	'''
 	if VERBOSITY_LEVEL > VerbosityLevels.NO_INFO_AND_WARNING:
 		print(colorize("[WARNING] ","purple")+message)
+		if utils.getLogger() != None:
+			utils.getLogger()('warning', message)
 
 
 def ask(prompt,default="",final=": "):
diff --git a/mirage/libs/utils.py b/mirage/libs/utils.py
index af8b3c1..e311c8d 100644
--- a/mirage/libs/utils.py
+++ b/mirage/libs/utils.py
@@ -229,6 +229,18 @@ def loadModule(name):
 	from mirage.core import app
 	return app.App.Instance.loader.load(name)
 
+def isDebugMode():
+	from mirage.core import app
+	return app.App.Instance.debugMode
+
+def registerLogger(logger):
+	from mirage.core import app
+	app.App.Instance.logger = logger
+
+def getLogger():
+	from mirage.core import app
+	return app.App.Instance.logger
+
 def exitMirage():
 	'''
 	This function exits Mirage.
diff --git a/mirage/libs/wireless_utils/packetQueue.py b/mirage/libs/wireless_utils/packetQueue.py
index 5c9ac72..0b1d0de 100644
--- a/mirage/libs/wireless_utils/packetQueue.py
+++ b/mirage/libs/wireless_utils/packetQueue.py
@@ -19,6 +19,7 @@ class StoppableThread(threading.Thread):
 				self._target(*(self._args))
 		except (KeyboardInterrupt,EOFError):
 			pass
+
 	def stop(self):
 		'''
 		This method stops the thread.
diff --git a/mirage/libs/wireless_utils/pcapDevice.py b/mirage/libs/wireless_utils/pcapDevice.py
index 2c4bccc..b8b6269 100644
--- a/mirage/libs/wireless_utils/pcapDevice.py
+++ b/mirage/libs/wireless_utils/pcapDevice.py
@@ -33,6 +33,7 @@ class PCAPDevice(Device):
 		self.initialTimestamp = None
 		self.beginningTimestamp = None
 		self.mode = None
+		self.fileMode = None
 		if interface[-5:] == ".pcap":
 			self.openFile()
 
@@ -42,16 +43,26 @@ class PCAPDevice(Device):
 
 	def openFile(self):
 		if isfile(self.filename):
-			try:
+			# append mode, overwrite mode or read mode
+			if self.filename[-9:-5] == ".apd":
+				self.mode = "write"
+				self.fileMode = "ab"
+			elif self.filename[-9:-5] == ".ovw":
+				self.mode = "write"
+				self.fileMode = "wb"
+			else:
 				self.mode = "read"
-				self.file = open(self.filename,"rb")
-
-			except IOError as e:
-				if e.errno == errno.EACCES:
-					io.fail("You don't have permissions to access this file !")
+				self.fileMode = "rb"
 		else:
 			self.mode = "write"
-			self.file = open(self.filename,"wb")
+			self.fileMode = "wb"
+		
+		try:
+			self.file = open(self.filename,self.fileMode)
+		except IOError as e:
+			if e.errno == errno.EACCES:
+				io.fail("You don't have permissions to access this file !")
+
 	def getMode(self):
 		'''
 		This method returns the mode used by this PCAP Device.
@@ -105,7 +116,8 @@ class PCAPDevice(Device):
 			dlt
 		)
 		try:
-			self.file.write(header)
+			if self.fileMode != "ab":
+				self.file.write(header)
 			return (magic,dlt,True)
 		except Exception as e:
 			print(e)
diff --git a/mirage/mirage.py b/mirage/mirage.py
index 82c536b..4845bd0 100755
--- a/mirage/mirage.py
+++ b/mirage/mirage.py
@@ -1,8 +1,10 @@
 #!/usr/bin/env python3
+import sys, os
+sys.path.append(os.path.dirname(os.path.dirname(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))) + '/test')
+
 from mirage.core import app,argParser,loader
 from mirage.libs.utils import initializeHomeDir
 
-
 def main():
 	try:
 		homeDir = initializeHomeDir()
diff --git a/mirage/modules/ble_connect.py b/mirage/modules/ble_connect.py
index 5509a53..31bb4bc 100644
--- a/mirage/modules/ble_connect.py
+++ b/mirage/modules/ble_connect.py
@@ -25,7 +25,9 @@ class ble_connect(module.WirelessModule):
 
 		if self.checkCapabilities():
 			io.info("Trying to connect to : "+self.args["TARGET"]+" (type : "+self.args["CONNECTION_TYPE"]+")")
-			self.emitter.sendp(ble.BLEConnect(self.args["TARGET"], type=self.args["CONNECTION_TYPE"]))
+			connectReq = ble.BLEConnect(self.args["TARGET"], type=self.args["CONNECTION_TYPE"])
+			io.displayPacket(connectReq)
+			self.emitter.sendp(connectReq)
 
 			while not self.receiver.isConnected() and timeout > 0:
 				timeout -= 1
diff --git a/mirage/modules/ble_discover.py b/mirage/modules/ble_discover.py
index 07a81ca..a7c25d7 100644
--- a/mirage/modules/ble_discover.py
+++ b/mirage/modules/ble_discover.py
@@ -75,6 +75,7 @@ class ble_discover(module.WirelessModule):
 				for typeInstance in types:
 					if isinstance(p,typeInstance):
 						return p
+
 	def serviceToString(self,service):
 		uuid128 = service["uuid"].UUID128.hex() if service["uuid"].UUID128 is not None else ""
 		name = service["uuid"].name if service["uuid"].name is not None else ""
diff --git a/mirage/modules/ble_master.py b/mirage/modules/ble_master.py
index 00d8735..932f874 100644
--- a/mirage/modules/ble_master.py
+++ b/mirage/modules/ble_master.py
@@ -164,7 +164,7 @@ class ble_master(module.WirelessModule, interpreter.Interpreter):
 		else:
 			io.fail("Interface provided ("+str(self.args["INTERFACE"])+") is not able to scan devices.")
 	
-	def connect(self,target:"!attribute:targets"="",connectionType:["public","random"]=""):
+	def connect(self,target:"!attribute:targets"="",connectionType:["public","random"]="",timeout=3):
 		if self.checkConnectionCapabilities():
 			target = self.args['TARGET'] if target=="" else target
 			connectionType = self.args['CONNECTION_TYPE'] if connectionType=="" else connectionType
@@ -175,7 +175,7 @@ class ble_master(module.WirelessModule, interpreter.Interpreter):
 				m['TARGET'] = target
 				m['CONNECTION_TYPE'] = connectionType
 				m['INTERFACE'] = self.args['INTERFACE']
-				m['WAITING_TIME'] = "3"
+				m['TIMEOUT'] = str(timeout)
 
 				if m.execute()["success"]:
 					self.updatePrompt(target)
diff --git a/mirage/modules/ble_scan.py b/mirage/modules/ble_scan.py
index 214f729..488acbc 100644
--- a/mirage/modules/ble_scan.py
+++ b/mirage/modules/ble_scan.py
@@ -134,6 +134,7 @@ class ble_scan(module.WirelessModule):
 			while time != 0:
 				utils.wait(seconds=1)
 				time -= 1
+				print('scan')
 				self.updateDevices()
 			self.receiver.setScan(enable=False)
 			return self.generateOutput()
diff --git a/mirage/modules/ble_sniff.py b/mirage/modules/ble_sniff.py
index e360ab8..ec10dcb 100644
--- a/mirage/modules/ble_sniff.py
+++ b/mirage/modules/ble_sniff.py
@@ -267,7 +267,8 @@ class ble_sniff(module.WirelessModule):
 		return self.ok()
 
 	def sniffAdvertisements(self,target, channel):
-
+		if self.pcap is not None:
+			self.pcap.sniffNewConnections(address=target, channel=channel)
 		if len(self.receivers) == 1:
 			enabled,sweepingSequence = self.sweepingParameter()	
 			if enabled:
@@ -292,6 +293,7 @@ class ble_sniff(module.WirelessModule):
 			return self.nok()
 		while True:
 			utils.wait(seconds=0.01)
+	
 	def run(self):
 		if self.args["PCAP_FILE"] != "":
 			self.pcap = self.getEmitter(self.args["PCAP_FILE"])
